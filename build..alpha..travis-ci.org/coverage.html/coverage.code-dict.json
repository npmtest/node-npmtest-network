{"/home/travis/build/npmtest/node-npmtest-network/test.js":"/* istanbul instrument in package npmtest_network */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-network/lib.npmtest_network.js":"/* istanbul instrument in package npmtest_network */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_network = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_network = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-network/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-network && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_network */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_network\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_network.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_network.rollup.js'] =\n            local.assetsDict['/assets.npmtest_network.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_network.__dirname +\n                    '/lib.npmtest_network.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-network/node_modules/network/lib/index.js":"\"use strict\";\n\nvar needle       = require('needle'),\n    os_functions = require('./' + process.platform);\n\n// var ip_regex = /((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})/;\nvar ip_regex = /(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)/;\n\nfunction is_ip_address(str) {\n  return ip_regex.test(str);\n};\n\n\nfunction nic_by_name(name, cb) {\n\n  os_functions.get_network_interfaces_list(function(err, list) {\n    if (err) return cb(err);\n\n    var nics = list.filter(function(nic) { return nic.name === name; });\n\n    if (nics.length > 0)\n      cb(null, nics[0]);\n    else\n      cb(new Error('No network interface named ' + name));\n  });\n\n};\n\nexports.get_public_ip = function(options, cb) {\n\n  var default_urls = [\n    'checkip.dyndns.org',\n    'http://wtfismyip.com/text',\n    'http://ipecho.net/plain',\n    'http://ifconfig.me/ip'\n  ];\n\n  if (typeof options == 'function') { // no options passed\n    cb = options;\n    options = {};\n  }\n\n  var urls = options.urls || default_urls;\n\n  function get(i) {\n    var url = urls[i];\n    if (!url) return cb(new Error('Unable to fetch IP address.'));\n\n    needle.get(url, function(err, resp) {\n      var body = resp && resp.body.toString();\n      if (body && body.match(ip_regex)) {\n        return cb(null, body.match(ip_regex)[1]);\n      }\n\n      get(i+1);\n    })\n  };\n\n  get(0);\n}\n\nexports.get_private_ip = function(cb) {\n\n  os_functions.get_network_interfaces_list(function(err, list) {\n    if (err || !list)\n      return cb(err || new Error('No network interfaces found.'));\n\n    os_functions.get_active_network_interface_name(function(err, active_nic) {\n      if (err) return cb(err);\n\n      var ips = list.filter(function(nic) {\n        if (is_ip_address(nic.ip_address))\n          return active_nic ? active_nic == nic.name : true;\n      });\n\n      if (ips.length > 0)\n        cb(null, ips[0].ip_address);\n      else\n        cb(new Error('No private IPs found (' + list.length + ' interfaces)'));\n    });\n  });\n\n};\n\nexports.get_gateway_ip = function(cb) {\n\n  os_functions.get_active_network_interface_name(function(err, nic_name) {\n    if (err || nic_name.trim() == '')\n      return cb(err || new Error('No active network interface found.'));\n\n    os_functions.gateway_ip_for(nic_name, function(err, out) {\n      if (err || !out || out.toString() == '')\n        return cb(err || new Error('No gateway IP assigned to ' + nic_name));\n\n      cb(null, out.toString().trim())\n    })\n  });\n\n};\n\nexports.get_active_interface = function(cb) {\n\n  os_functions.get_active_network_interface_name(function(err, nic_name) {\n    if (err || !nic_name) return cb(err || new Error(\"No active interfaces detected.\"));\n\n    nic_by_name(nic_name, function(err, nic) {\n      if (err) return cb(err);\n\n      os_functions.netmask_for(nic_name, function(err, netmask) {\n        if (!err && netmask)\n          nic.netmask = netmask.trim();\n\n        os_functions.gateway_ip_for(nic_name, function(err, ip) {\n          if (!err && ip)\n            nic.gateway_ip = ip.toString().trim();\n\n          cb(null, nic);\n        })\n      });\n    });\n  });\n\n};\n\nexports.get_interfaces_list = os_functions.get_network_interfaces_list;\nexports.mac_address_for = os_functions.mac_address_for;\n","/home/travis/build/npmtest/node-npmtest-network/node_modules/network/lib/linux.js":"\"use strict\";\n\nvar os    = require('os'),\n    exec  = require('child_process').exec,\n    async = require('async');\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function(err, out) {\n    if (out && out.toString() != '')\n      cb(null, out.toString().trim())\n    else\n      cb(err)\n  })\n}\n\n// If no wifi, then there is no error but cbed get's a null in second param.\nexports.get_active_network_interface_name = function(cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $NF}'\";\n  exec(cmd, function(err, stdout) {\n    if (err) return cb(err);\n\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === [''])\n      return cb(new Error('No active network interface found.'));\n\n    cb(null, raw[0]);\n  });\n};\n\nexports.interface_type_for = function(nic_name, cb) {\n  exec('cat /proc/net/wireless | grep ' + nic_name, function(err, out) {\n    return cb(null, err ? 'Wired' : 'Wireless')\n  })\n};\n\nexports.mac_address_for = function(nic_name, cb) {\n  var cmd = 'cat /sys/class/net/' + nic_name + '/address';\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function(nic_name, cb) {\n  trim_exec(\"ip r | grep \" + nic_name + \" | grep default | cut -d ' ' -f 3\", cb);\n};\n\nexports.netmask_for = function(nic_name, cb) {\n  var cmd = \"ifconfig \" + nic_name + \" 2> /dev/null | egrep 'netmask|Mask:' | awk '{print $4}' | sed 's/Mask://'\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function(cb) {\n\n  var count = 0,\n      list = [],\n      nics = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([\n      function(cb) {\n        exports.mac_address_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.gateway_ip_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.netmask_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.interface_type_for(obj.name, cb)\n      }\n    ], function(err, results) {\n      if (results[0]) obj.mac_address = results[0];\n      if (results[1]) obj.gateway_ip  = results[1];\n      if (results[2]) obj.netmask     = results[2];\n      if (results[3]) obj.type        = results[3];\n      \n      list.push(obj);\n      --count || cb(null, list);\n    })\n  }\n\n  for (var key in nics) {\n    if (key != 'lo0' && key != 'lo' && !key.match(/^tun/)) {\n\n      count++;\n      var obj = { name: key };\n\n      nics[key].forEach(function(type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n\n      append_data(obj);\n    }\n  }\n\n  if (count == 0)\n    cb(new Error('No interfaces found.'))\n}\n\n","/home/travis/build/npmtest/node-npmtest-network/node_modules/network/lib/darwin.js":"\"use strict\";\n\nvar os    = require('os'),\n    exec  = require('child_process').exec,\n    async = require('async');\n\n//////////////////////////////////////////\n// helpers\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function(err, out) {\n    if (out && out.toString() != '')\n      cb(null, out.toString().trim())\n    else\n      cb(err)\n  })\n}\n\n\nfunction determine_nic_type(str) {\n  return str.match(/Ethernet/)\n         ? 'Wired'\n         : str.match(/Wi-?Fi|AirPort/i)\n           ? 'Wireless'\n           : str.match(/FireWire/)\n             ? 'FireWire'\n             : str.match(/Thunderbolt/)\n               ? 'Thunderbolt'\n               : 'Other';\n}\n\n//////////////////////////////////////////\n// exports\n\nexports.get_active_network_interface_name = function(cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $6}'\";\n  exec(cmd, function(err, stdout) {\n    if (err) return cb(err);\n\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === [''])\n      return cb(new Error('No active network interface found.'));\n\n    cb(null, raw[0]);\n  });\n};\n\n/* unused\n\nexports.interface_type_for = function(nic_name, cb) {\n  exec('networksetup -listnetworkserviceorder | grep ' + nic_name, function(err, out) {\n    if (err) return cb(err);\n\n    var type = out.toString().match(/ethernet|lan/i) ? 'Wired' : 'Wireless';\n    cb(null, type);\n  })\n};\n*/\n\nexports.mac_address_for = function(nic_name, cb) {\n  var cmd = \"networksetup -getmacaddress \" + nic_name + \" | awk '{print $3}'\";\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function(nic_name, cb) {\n  var cmd = \"ipconfig getoption \" + nic_name + \" router\";\n  trim_exec(cmd, cb);\n};\n\nexports.netmask_for = function(nic_name, cb) {\n  var cmd = \"ipconfig getoption \" + nic_name + \" subnet_mask\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function(cb) {\n\n  var count = 0,\n      list  = [],\n      nics  = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([\n      function(cb) {\n        exports.gateway_ip_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.netmask_for(obj.name, cb)\n      }\n    ], function(err, results) {\n      if (results[0]) obj.gateway_ip = results[0];\n      if (results[1]) obj.netmask    = results[1];\n      \n      list.push(obj);\n      --count || cb(null, list);\n    })\n  }\n\n  exec('networksetup -listallhardwareports', function(err, out) {\n    if (err) return cb(err);\n\n    var blocks = out.toString().split(/Hardware/).slice(1);\n    count = blocks.length;\n\n    blocks.forEach(function(block) {\n      var parts = block.match(/Port: (.+)/),\n          mac   = block.match(/Address: ([A-Fa-f0-9:-]+)/),\n          name  = block.match(/Device: (\\w+)/);\n\n      if (!parts || !mac || !name) \n        return --count;\n\n      var obj   = {},\n          port  = parts[1];\n\n      obj.name  = name[1];\n      // obj.desc  = port;\n      obj.type  = determine_nic_type(port);\n      obj.ip_address  = null;\n      obj.mac_address = mac[1];\n\n      (nics[obj.name] || []).forEach(function(type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n\n      append_data(obj);\n    })\n\n    if (count == 0)\n      cb(new Error('No interfaces found.'))\n  })\n\n};\n","/home/travis/build/npmtest/node-npmtest-network/node_modules/network/lib/win32.js":"\"use strict\";\n\nvar wmic = require('wmic'),\n    exec = require('child_process').exec,\n    os   = require('os');\n\nfunction get_wmic_ip_value(what, nic_name, cb){\n  exports.mac_address_for(nic_name, function(err, mac){\n    if (err || !mac)\n      return cb(err || new Error('No MAC Address found.'));\n\n    wmic.get_value('nicconfig', what, 'MACAddress = \\'' + mac + '\\'', function(err, out){\n      if (err) return cb(err);\n\n      cb(null, out.split(',')[0].replace(/[^0-9\\.]/g, ''));\n    });\n  })\n}\n\nexports.get_active_network_interface_name = function(cb) {\n  wmic.get_value('nic', 'NetConnectionID', 'NetConnectionStatus = 2', cb);\n};\n\nexports.netmask_for = function(nic_name, cb) {\n  get_wmic_ip_value('IPSubnet', nic_name, cb);\n};\n\nexports.gateway_ip_for = function(nic_name, cb) {\n  get_wmic_ip_value('DefaultIPGateway', nic_name, cb);\n};\n\nexports.mac_address_for = function(nic_name, cb) {\n  var cond = 'NetConnectionID = \\'' + nic_name + '\\'';\n  wmic.get_value('nic', 'MACAddress', cond, cb);\n}\n\nexports.get_network_interfaces_list = function(callback) {\n\n  var list = [],\n      node_nics = os.networkInterfaces();\n\n  wmic.get_list('nic', function(err, nics) {\n    if (err) return callback(err);\n\n    nics.forEach(function(nic){\n      if (nic.Name && nic.NetConnectionID != '' && nic.MACAddress != '') {\n\n        var obj = {\n          name: nic.NetConnectionID,\n          // description: nic.Name,\n          mac_address: nic.MACAddress,\n          ip_address: nic.IPAddress,\n          vendor: nic.Manufacturer,\n          model: nic.Description,\n          type: nic.Name.match(/wi-?fi|wireless/i) ? 'Wireless' : 'Wired'\n        }\n\n        var node_nic = node_nics[obj.name] || [];\n\n        node_nic.forEach(function(type){\n          if (type.family == 'IPv4') {\n            obj.ip_address = type.address;\n          }\n        });\n\n        list.push(obj);\n      }\n    })\n\n    callback(null, list);\n  });\n\n};\n"}